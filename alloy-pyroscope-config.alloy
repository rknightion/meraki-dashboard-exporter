// Alloy configuration for scraping Meraki Dashboard Exporter profiles
// This configuration scrapes the comprehensive set of profiling endpoints
// provided by the Python-based Meraki Dashboard Exporter

pyroscope.scrape "meraki_exporter_profiles" {
	// Scrape every 30 seconds to capture the minute-based collection bursts
	// This ensures we catch activity when "something happens" within seconds
	scrape_interval = "30s"

	targets = [
		{
			"__address__" = "localhost:9099",
			"service_name" = "meraki-dashboard-exporter",
			"env" = "production", // Adjust as needed
			"instance" = "localhost:9099",
			"job" = "meraki-exporter-profiling",
			"component" = "dashboard-exporter",
			"team" = "infrastructure", // Adjust as needed
		},
	]

	// Standard Go pprof-compatible endpoints (using defaults)
	// These are snapshot profiles, so delta = false (default)

	// Heap memory profile - current allocations
	heap {}

	// Memory allocations profile with traceback
	allocs {}

	// Thread/goroutine profile - threads and async tasks
	goroutine {}

	// Blocking operations profile
	block {}

	// Lock contention profile
	mutex {}

	// CPU profile - duration-based, so delta = true
	// Duration will be scrape_interval - 1 = 29s by default
	profile {
		delta = true
		// seconds parameter automatically added by Alloy
	}

	// Custom Python-specific profile endpoints
	// These require profile.custom blocks since they're not standard Go pprof endpoints

	// In-use objects profile - snapshot of current objects by type
	profile.custom "inuse_objects" {
		enabled = true
		path = "/debug/pprof/inuse_objects"
		delta = false // Snapshot profile
	}

	// In-use space profile - memory usage by allocation site
	profile.custom "inuse_space" {
		enabled = true
		path = "/debug/pprof/inuse_space"
		delta = false // Snapshot profile
	}

	// Wall clock time profile - duration-based sampling
	profile.custom "wall" {
		enabled = true
		path = "/debug/pprof/wall"
		delta = true // Duration-based profile
		// Will automatically add seconds parameter = scrape_interval - 1
	}

	// Exceptions profile - Python exception tracking
	profile.custom "exceptions" {
		enabled = true
		path = "/debug/pprof/exceptions"
		delta = false // Snapshot profile
	}

	// Enable profiling endpoints (ensure profiling is enabled on the exporter)
	// The exporter must have MERAKI_EXPORTER_ENABLE_PROFILING=true
	profiling_config {
		mutex_profiling_fraction = 1
		block_profiling_rate = 1
	}
}

// Write profiles to Grafana Cloud
pyroscope.write "endpoint" {
	endpoint {
		// NOTE: Update this URL to your Grafana Cloud Pyroscope endpoint
		// The URL you provided appears to be for Loki, not Pyroscope
		// Pyroscope endpoints typically look like: https://profiles-prod-XXX.grafana.net
		url = "https://profiles-prod-035.grafana.net" // UPDATE THIS URL

		basic_auth {
			username = "1175378"
			password = sys.env("GCLOUD_RW_API_KEY")
		}

		// Optional: Add headers for better organization
		headers = {
			"X-Scope-OrgID" = "meraki-exporter",
		}
	}

	// Send all scraped profiles to this endpoint
	external_labels = {
		"cluster" = "production", // Adjust as needed
		"region" = "us-east-1",   // Adjust as needed
	}
}

// Optional: Health check for the exporter to ensure it's running
discovery.http "meraki_exporter_health" {
	url = "http://localhost:9099/health"
	refresh_interval = "30s"
}

// Optional: Logging configuration for debugging
logging {
	level = "info"
	format = "logfmt"
}
